public class Main {

    public static void main(String[] args) {
        // test your code here

        Card first = new Card(2, Suit.DIAMOND);
        Card second = new Card(14, Suit.SPADE);
        Card third = new Card(12, Suit.HEART);

        System.out.println(first);
        System.out.println(second);
        System.out.println(third);
    }
}

import java.util.Collections;
import java.util.Comparator;



public class Card implements Comparable<Card> {

    private int value;
    private Suit suit;

    public Card(int value, Suit suit) {
        if (value < 2 || value > 14) {
            throw new IllegalArgumentException("Card value must be in range 2...14.");
        }

        this.value = value;
        this.suit = suit;
    }

    @Override
    public String toString() {
        String cardValue = "" + value;
        if(value == 11) {
            cardValue = "J";
        } else if (value == 12) {
            cardValue = "Q";
        } else if (value == 13) {
            cardValue = "K";
        } else if (value == 14) {
            cardValue = "A";
        }
        
        return suit + " " + cardValue;
    }

    public int getValue() {
        return value;
    }

    public Suit getSuit() {
        return suit;
    }
    
    @Override
    public int compareTo(Card cardToCompare) {
    	if (this.getValue() == cardToCompare.getValue()) {
    		return  this.getSuit().ordinal() - cardToCompare.getSuit().ordinal();
		}
		return this.getValue() - cardToCompare.getValue();
	}

}

public enum Suit {
    CLUB, DIAMOND, HEART, SPADE;

}

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;

public class Hand implements Comparable<Hand> {
	private ArrayList<Card> hand;

	public Hand() {
		this.hand = new ArrayList<>();
	}

	public void add(Card card) {
		this.hand.add(card);
	}

	public void print() {
		Iterator<Card> iterator = hand.iterator();

		while(iterator.hasNext()) {
			Card nextCard = iterator.next();
			System.out.println(nextCard);
		}
	}

	public void sort() {
		Comparator<Card> comparator = Comparator
				.comparing(Card::getValue)
				.thenComparing(Card::getSuit);

		Collections.sort(hand, comparator);
	}

	@Override
	public int compareTo(Hand handToCompare) {
		int thisHandValue = 0;
		for (Card card : hand) {
			thisHandValue += card.getValue();
		}
		int compareHandValue = 0;
		for (Card card : handToCompare.hand) {
			compareHandValue += card.getValue();
		}

		return thisHandValue - compareHandValue;
	}

	public void sortBySuit() {
		Collections.sort(hand, new BySuitInValueOrder());
	}
}

import java.util.Comparator;

public class BySuitInValueOrder implements Comparator<Card> {
	public int compare(Card c1, Card c2) {
		if (c1.getSuit().ordinal() == c2.getSuit().ordinal()) {

			return c1.getValue() - c2.getValue();
		}

		return c1.getSuit().ordinal() - c2.getSuit().ordinal();
	}
}
