public class Main {

    public static void main(String[] args) {
        
        Room room = new Room();
        room.add(new Person("Lea", 183));
        room.add(new Person("Kenya", 182));
        room.add(new Person("Auli", 186));
        room.add(new Person("Nina", 172));
        room.add(new Person("Terhi", 185));

        System.out.println("");
        for (Person person : room.getPersons()) {
            System.out.println(person);
        }

        System.out.println();
        System.out.println("Shortest: " + room.take());
        System.out.println("");
        for (Person person : room.getPersons()) {
            System.out.println(person);
        }
        
        System.out.println("\nOrdered List: ");
        
        while (!room.isEmpty()) {
            System.out.println(room.take());
        }
        
    }
}

import java.util.Objects;

public class Person {

    private String name;
    private int height;

    public Person(String name, int height) {
        this.name = name;
        this.height = height;
    }

    public String getName() {
        return name;
    }

    public int getHeight() {
        return height;
    }

    @Override
    public String toString() {
        return this.name + " (" + this.height + " cm)";
    }

    // Created with the insert code functionality of NetBeans
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Person other = (Person) obj;
        if (this.height != other.height) {
            return false;
        }
        if (!Objects.equals(this.name, other.name)) {
            return false;
        }
        return true;
    }

}

import java.util.ArrayList;

public class Room {
    
    private ArrayList<Person> peopleList;
    
    public Room() {
        this.peopleList = new ArrayList<>();
    }
    
    public void add(Person person) {
        this.peopleList.add(person);
    }    
    
    public boolean isEmpty() {
        if (this.peopleList.isEmpty()) {
            return true;
        }
        return false;
    }
    
    public ArrayList<Person> getPersons() {
        return peopleList;  
    }
    
    public Person shortest() {
        if (peopleList.isEmpty()) {
            return null;
        }
        
        Person returnPerson = this.peopleList.get(0);
        
        for (Person people: peopleList) {
            if (people.getHeight() < returnPerson.getHeight()) {
                returnPerson = people;
            }
        }
        return returnPerson;
    }
    
    public Person take() {
        if (peopleList.isEmpty()) {
            return null;
        }
        
        Person returnPerson = this.peopleList.get(0);
        
        
        for (Person people: peopleList) {
            if (people.getHeight() < returnPerson.getHeight()) {
                returnPerson = people;
            }
        }
        Person returnPersonTwo = returnPerson;
        peopleList.remove(returnPerson);
        return returnPersonTwo;
    }
}
